{"version":3,"sources":["cryptomonedas.png","hooks/UseMoneda.js","hooks/UseCriptomoneda.js","components/Error.js","components/Formulario.js","components/Cotizacion.js","components/Spinner.js","App.js","reportWebVitals.js","index.js"],"names":["Label","styled","label","Select","select","UseMoneda","stateInicial","opciones","useState","state","actualizarState","onChange","e","target","value","map","opcion","codigo","nombre","UseCriptomoneda","CoinInfo","Name","FullName","Id","MensajeError","p","Error","mensaje","Boton","input","Formulario","guardarCriptomoneda","guardarMoneda","listacripto","guardarCriptomonedas","error","guardarError","moneda","SeleccionarMoneda","criptomoneda","SeleccCriptoneda","useEffect","a","axios","get","respuesta","data","Data","consultarAPI","onSubmit","preventDefault","type","ResultadoDiv","div","Info","Precio","Cotizacion","resultado","Object","keys","length","PRICE","HIGHDAY","LOWDAY","CHANGEPCT24HOUR","LASTUPDATE","Spinner","className","Contenerdor","Imagen","img","Heading","h1","App","guardarResultado","cargando","guardarCargando","url","setTimeout","DISPLAY","cotizarCriptomoneda","Componente","src","imagen","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50ef7815.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cryptomonedas.51f1d2ed.png\";","import React , {Fragment,useState} from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst Label = styled.label`\r\n    font-family: 'Bebas Neue', cursive;\r\n    color: #FFF;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    font-size: 2.4rem;\r\n    margin-top: 2rem;\r\n    display: block;\r\n`;\r\n\r\nconst Select = styled.select`\r\n    width: 100%;\r\n    display:block;\r\n    padding: 1rem;\r\n    -webkit-appearance: none;\r\n    border-radius: 10px;\r\n    border: none;\r\n    font-size: 1.2rem;\r\n`\r\n\r\n\r\nconst UseMoneda = (label,stateInicial,opciones)=>{\r\n        //state de nuestro custom hook\r\n        const [state,actualizarState]=useState(stateInicial)\r\n\r\n        const Seleccionar = ()=>\r\n            (\r\n                <Fragment>\r\n                    <Label>{label}</Label>\r\n                    <Select\r\n                        onChange={ e=> actualizarState(e.target.value)}\r\n                        value={state}\r\n                    >\r\n                        <option>--Elige tu moneda--</option>\r\n                        {opciones.map( opcion => (\r\n                            <option key={opcion.codigo} value={opcion.codigo} >{opcion.nombre}</option>\r\n                        ))}\r\n                    </Select>\r\n                </Fragment>\r\n            )\r\n\r\n        return [state,Seleccionar,actualizarState]\r\n        \r\n\r\n}\r\n\r\n\r\nexport default UseMoneda;","import React , {Fragment,useState} from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst Label = styled.label`\r\n    font-family: 'Bebas Neue', cursive;\r\n    color: #FFF;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    font-size: 2.4rem;\r\n    margin-top: 2rem;\r\n    display: block;\r\n`;\r\n\r\nconst Select = styled.select`\r\n    width: 100%;\r\n    display:block;\r\n    padding: 1rem;\r\n    -webkit-appearance: none;\r\n    border-radius: 10px;\r\n    border: none;\r\n    font-size: 1.2rem;\r\n`\r\n\r\n\r\nconst UseCriptomoneda = (label,stateInicial,opciones)=>{\r\n        //state de nuestro custom hook\r\n        const [state,actualizarState]=useState(stateInicial)\r\n\r\n        const SelectCripto = ()=>\r\n            (\r\n                <Fragment>\r\n                    <Label>{label}</Label>\r\n                    <Select\r\n                        onChange={ e=> actualizarState(e.target.value)}\r\n                        value={state}\r\n                    >\r\n                        <option>--Elige tu moneda--</option>\r\n                        {opciones.map( opcion => (\r\n                            <option key={opcion.CoinInfo.Id} value={opcion.CoinInfo.Name} >{opcion.CoinInfo.FullName}</option>\r\n                        ))}\r\n                    </Select>\r\n                </Fragment>\r\n            )\r\n\r\n        return [state,SelectCripto,actualizarState]\r\n        \r\n\r\n}\r\n\r\n\r\nexport default UseCriptomoneda;","import React from 'react';\r\nimport styled from '@emotion/styled'\r\n\r\nconst MensajeError = styled.p`\r\n    background-color: #b7322c;\r\n    padding: 1rem;\r\n    color: #FFF;\r\n    font-size: 30px;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    text-align: center;\r\n    font-family: 'Bebas Neue', cursive;\r\n`;\r\n\r\n\r\nconst Error = ({mensaje}) => {\r\n    return ( \r\n        <MensajeError>{mensaje}</MensajeError>\r\n     );\r\n}\r\n \r\nexport default Error;","import React ,{useEffect,useState} from 'react';\r\nimport styled from '@emotion/styled';\r\nimport UseMoneda from '../hooks/UseMoneda';\r\nimport UseCriptomoneda from '../hooks/UseCriptomoneda';\r\nimport axios from 'axios';\r\nimport Error from './Error';\r\n\r\nconst Boton = styled.input`\r\n    margin-top:20px;\r\n    font-weight:bold;\r\n    padding:10px;\r\n    border:none;\r\n    width:100%;\r\n    border-radius: 10px;\r\n    color:#FFF;\r\n    background-color:#66a2fe;\r\n    transition: background-color 0.3s ease;\r\n    &&:hover{\r\n        background-color:#326AC0;\r\n        cursor:pointer;\r\n    }\r\n\r\n`\r\n\r\nconst Formulario = ({guardarCriptomoneda,guardarMoneda}) => {\r\n\r\n    const [listacripto,guardarCriptomonedas]= useState([])\r\n    const [error,guardarError]=useState(false)\r\n    \r\n    const MONEDAS = [\r\n        { codigo: 'USD', nombre: 'Dolar de Estados Unidos' },\r\n        { codigo: 'MXN', nombre: 'Peso Mexicano' },\r\n        { codigo: 'EUR', nombre: 'Euro' },\r\n        { codigo: 'GBP', nombre: 'Libra Esterlina' }\r\n    ];\r\n\r\n    const [moneda,SeleccionarMoneda]=UseMoneda('Elige tu Moneda','',MONEDAS);\r\n    const [criptomoneda,SeleccCriptoneda]=UseCriptomoneda('Elige tu Criptomoneda','',listacripto)\r\n  \r\n\r\n    useEffect(()=>{\r\n        const url = `https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD`\r\n\r\n        const consultarAPI =async()=>{\r\n            const respuesta = await axios.get(url)\r\n\r\n           guardarCriptomonedas(respuesta.data.Data)\r\n        }\r\n\r\n        consultarAPI()\r\n    },[]);\r\n\r\n    //cuando el usuario hace submit\r\n\r\n    const cotizarMoneda = e=>{\r\n        e.preventDefault();\r\n\r\n        //validar si ambos campos estan llenos\r\n        if(moneda===''||criptomoneda===''){\r\n            guardarError(true)\r\n            return;\r\n        }\r\n\r\n        guardarError(false);\r\n        //pasar los datos al componente principal\r\n        guardarCriptomoneda(criptomoneda)\r\n        guardarMoneda(moneda)\r\n    }\r\n\r\n    return ( \r\n        <form\r\n            onSubmit={cotizarMoneda}\r\n        >\r\n            {error? <Error mensaje='Todos los campos son obligatorios'/> :null}\r\n            <SeleccionarMoneda/>\r\n            <SeleccCriptoneda/>\r\n            <Boton\r\n                type='submit'\r\n                value='Calcular'\r\n            />\r\n        </form>\r\n     );\r\n    }\r\n \r\nexport default Formulario;","import React from 'react';\r\nimport styled from '@emotion/styled'\r\n\r\nconst ResultadoDiv = styled.div`\r\n    color: #FFF;\r\n    font-family: Arial, Helvetica, sans-serif;\r\n`;\r\n\r\nconst Info = styled.p`\r\n    font-size: 18px;\r\n    span {\r\n        font-weight:bold;\r\n    }\r\n`;\r\nconst Precio = styled.p`\r\n    font-size: 30px;\r\n    span {\r\n        font-weight:bold;\r\n    }\r\n`\r\n\r\nconst Cotizacion = ({resultado}) => {\r\n    if(Object.keys(resultado).length===0)return null\r\n\r\n    return ( \r\n        <ResultadoDiv>\r\n        <Precio>El precio es: <span>{resultado.PRICE}</span> </Precio>\r\n        <Info>Precio más alto del día: <span>{resultado.HIGHDAY}</span> </Info>\r\n        <Info>Precio más bajo del día: <span>{resultado.LOWDAY}</span> </Info>\r\n        <Info>Variación últimas 24 horas: <span>{resultado.CHANGEPCT24HOUR}</span> </Info>\r\n        <Info>Última Actualización: <span>{resultado.LASTUPDATE}</span> </Info>\r\n    </ResultadoDiv>\r\n     );\r\n}\r\n \r\nexport default Cotizacion;","import React from 'react';\r\nimport './Spinner.css'\r\n\r\nconst Spinner = () => {\r\n    return ( \r\n        <div className=\"sk-chase\">\r\n            <div className=\"sk-chase-dot\"></div>\r\n            <div className=\"sk-chase-dot\"></div>\r\n            <div className=\"sk-chase-dot\"></div>\r\n            <div className=\"sk-chase-dot\"></div>\r\n            <div className=\"sk-chase-dot\"></div>\r\n            <div className=\"sk-chase-dot\"></div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Spinner;","import React , {useState,useEffect}from 'react';\nimport styled from '@emotion/styled'\nimport axios from 'axios'\nimport imagen from './cryptomonedas.png'\nimport Formulario from './components/Formulario'\nimport Cotizacion from './components/Cotizacion';\nimport Spinner from './components/Spinner';\n\n\nconst Contenerdor = styled.div`\n    max-width:900px;\n    margin:0 auto;\n    @media (min-width:992px){\n      display:grid;\n      grid-template-columns: repeat(2,1fr);\n      columns-gap: 2rem ;\n    }\n`\nconst Imagen =styled.img`\n  max-width:100%;\n  margin-top:5rem;\n`;\n\nconst Heading = styled.h1`\n  font-family: 'Bebas Neue', cursive;\n  color: #FFF;\n  text-align:left;\n  font-weight: 700;\n  font-size: 50px;\n  margin-bottom: 50px;\n  margin-top: 80px;\n  &::after {\n    content: '';\n    width: 100px;\n    height: 6px;\n    background-color: #66A2FE;\n    display:block;\n  }\n`;\n\nfunction App() {\n  const [moneda,guardarMoneda]=useState('');\n  const [criptomoneda,guardarCriptomoneda]=useState('');\n  const [resultado,guardarResultado]=useState({});\n  const [cargando,guardarCargando]=useState(false)\n\n  useEffect(()=>{\n\n    const cotizarCriptomoneda = async()=>{\n\n      //evitamos la ejecucion por primera vez\n      if(moneda==='')return null\n\n      const url = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${criptomoneda}&tsyms=${moneda}`;\n\n      const resultado = await axios.get(url);\n      guardarCargando(true)\n\n      setTimeout(()=>{\n        guardarCargando(false)\n\n        guardarResultado(resultado.data.DISPLAY[criptomoneda][moneda]);\n      },3000)\n     \n\n    }\n\n    cotizarCriptomoneda()\n\n  },[moneda,criptomoneda])\n\nconst Componente = cargando ? <Spinner/> :<Cotizacion resultado={resultado} />\n\n  return (\n    <Contenerdor>\n      <div>\n        <Imagen\n          src={imagen}\n          alt='imagen cripto'\n        />\n      </div>\n      <div>\n         <Heading>Cotiza Criptomonedas al instante</Heading>\n         <Formulario\n           guardarCriptomoneda={guardarCriptomoneda}\n           guardarMoneda={guardarMoneda}\n         />\n         {Componente}\n         \n      </div>\n    </Contenerdor>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}